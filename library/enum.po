# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-15 20:43+0000\n"
"PO-Revision-Date: 2018-05-23 16:01+0000\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/enum.rst:2
msgid ":mod:`enum` --- Support for enumerations"
msgstr ""

#: ../../library/enum.rst:14
msgid "**Source code:** :source:`Lib/enum.py`"
msgstr "**原始碼：**\\ :source:`Lib/enum.py`"

#: ../../library/enum.rst:18
msgid ""
"This page contains the API reference information. For tutorial information "
"and discussion of more advanced topics, see"
msgstr ""

#: ../../library/enum.rst:21
msgid ":ref:`Basic Tutorial <enum-basic-tutorial>`"
msgstr ""

#: ../../library/enum.rst:22
msgid ":ref:`Advanced Tutorial <enum-advanced-tutorial>`"
msgstr ""

#: ../../library/enum.rst:23
msgid ":ref:`Enum Cookbook <enum-cookbook>`"
msgstr ""

#: ../../library/enum.rst:27
msgid "An enumeration:"
msgstr ""

#: ../../library/enum.rst:29
msgid "is a set of symbolic names (members) bound to unique values"
msgstr ""

#: ../../library/enum.rst:30
msgid "can be iterated over to return its members in definition order"
msgstr ""

#: ../../library/enum.rst:31
msgid "uses *call* syntax to return members by value"
msgstr ""

#: ../../library/enum.rst:32
msgid "uses *index* syntax to return members by name"
msgstr ""

#: ../../library/enum.rst:34
msgid ""
"Enumerations are created either by using :keyword:`class` syntax, or by "
"using function-call syntax::"
msgstr ""

#: ../../library/enum.rst:48
msgid ""
"Even though we can use :keyword:`class` syntax to create Enums, Enums are "
"not normal Python classes.  See :ref:`How are Enums different? <enum-class-"
"differences>` for more details."
msgstr ""

#: ../../library/enum.rst:52
msgid "Nomenclature"
msgstr ""

#: ../../library/enum.rst:54
msgid "The class :class:`Color` is an *enumeration* (or *enum*)"
msgstr ""

#: ../../library/enum.rst:55
msgid ""
"The attributes :attr:`Color.RED`, :attr:`Color.GREEN`, etc., are "
"*enumeration members* (or *members*) and are functionally constants."
msgstr ""

#: ../../library/enum.rst:57
msgid ""
"The enum members have *names* and *values* (the name of :attr:`Color.RED` is "
"``RED``, the value of :attr:`Color.BLUE` is ``3``, etc.)"
msgstr ""

#: ../../library/enum.rst:64
msgid "Module Contents"
msgstr "模組內容"

#: ../../library/enum.rst:66
msgid ":class:`EnumType`"
msgstr ""

#: ../../library/enum.rst:68
msgid "The ``type`` for Enum and its subclasses."
msgstr ""

#: ../../library/enum.rst:70
msgid ":class:`Enum`"
msgstr ""

#: ../../library/enum.rst:72
msgid "Base class for creating enumerated constants."
msgstr ""

#: ../../library/enum.rst:74
#, fuzzy
msgid ":class:`IntEnum`"
msgstr "IntEnum"

#: ../../library/enum.rst:76
msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`int`. (`Notes`_)"
msgstr ""

#: ../../library/enum.rst:79
msgid ":class:`StrEnum`"
msgstr ""

#: ../../library/enum.rst:81
msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`str`. (`Notes`_)"
msgstr ""

#: ../../library/enum.rst:84
msgid ":class:`Flag`"
msgstr ""

#: ../../library/enum.rst:86
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operations without losing their :class:`Flag` membership."
msgstr ""

#: ../../library/enum.rst:89
#, fuzzy
msgid ":class:`IntFlag`"
msgstr "IntFlag"

#: ../../library/enum.rst:91
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operators without losing their :class:`IntFlag` membership. :class:"
"`IntFlag` members are also subclasses of :class:`int`. (`Notes`_)"
msgstr ""

#: ../../library/enum.rst:95
msgid ":class:`EnumCheck`"
msgstr ""

#: ../../library/enum.rst:97
msgid ""
"An enumeration with the values ``CONTINUOUS``, ``NAMED_FLAGS``, and "
"``UNIQUE``, for use with :func:`verify` to ensure various constraints are "
"met by a given enumeration."
msgstr ""

#: ../../library/enum.rst:101
msgid ":class:`FlagBoundary`"
msgstr ""

#: ../../library/enum.rst:103
msgid ""
"An enumeration with the values ``STRICT``, ``CONFORM``, ``EJECT``, and "
"``KEEP`` which allows for more fine-grained control over how invalid values "
"are dealt with in an enumeration."
msgstr ""

#: ../../library/enum.rst:107
msgid ":class:`auto`"
msgstr ""

#: ../../library/enum.rst:109
msgid ""
"Instances are replaced with an appropriate value for Enum members. :class:"
"`StrEnum` defaults to the lower-cased version of the member name, while "
"other Enums default to 1 and increase from there."
msgstr ""

#: ../../library/enum.rst:113
msgid ":func:`~enum.property`"
msgstr ""

#: ../../library/enum.rst:115
msgid ""
"Allows :class:`Enum` members to have attributes without conflicting with "
"member names."
msgstr ""

#: ../../library/enum.rst:118
msgid ":func:`unique`"
msgstr ""

#: ../../library/enum.rst:120
msgid ""
"Enum class decorator that ensures only one name is bound to any one value."
msgstr ""

#: ../../library/enum.rst:122
msgid ":func:`verify`"
msgstr ""

#: ../../library/enum.rst:124
msgid ""
"Enum class decorator that checks user-selectable constraints on an "
"enumeration."
msgstr ""

#: ../../library/enum.rst:127
msgid ":func:`member`"
msgstr ""

#: ../../library/enum.rst:129
msgid "Make ``obj`` a member.  Can be used as a decorator."
msgstr ""

#: ../../library/enum.rst:131
msgid ":func:`nonmember`"
msgstr ""

#: ../../library/enum.rst:133
msgid "Do not make ``obj`` a member.  Can be used as a decorator."
msgstr ""

#: ../../library/enum.rst:136
msgid "``Flag``, ``IntFlag``, ``auto``"
msgstr "``Flag``, ``IntFlag``, ``auto``"

#: ../../library/enum.rst:137
msgid ""
"``StrEnum``, ``EnumCheck``, ``FlagBoundary``, ``property``, ``member``, "
"``nonmember``"
msgstr ""

#: ../../library/enum.rst:142
msgid "Data Types"
msgstr ""

#: ../../library/enum.rst:147
msgid ""
"*EnumType* is the :term:`metaclass` for *enum* enumerations.  It is possible "
"to subclass *EnumType* -- see :ref:`Subclassing EnumType <enumtype-"
"examples>` for details."
msgstr ""

#: ../../library/enum.rst:151
msgid ""
"*EnumType* is responsible for setting the correct :meth:`__repr__`, :meth:"
"`__str__`, :meth:`__format__`, and :meth:`__reduce__` methods on the final "
"*enum*, as well as creating the enum members, properly handling duplicates, "
"providing iteration over the enum class, etc."
msgstr ""

#: ../../library/enum.rst:158
msgid "Returns ``True`` if member belongs to the ``cls``::"
msgstr ""

#: ../../library/enum.rst:166
msgid ""
"In Python 3.12 it will be possible to check for member values and not just "
"members; until then, a ``TypeError`` will be raised if a non-Enum-member is "
"used in a containment check."
msgstr ""

#: ../../library/enum.rst:172
msgid ""
"Returns ``['__class__', '__doc__', '__members__', '__module__']`` and the "
"names of the members in *cls*::"
msgstr ""

#: ../../library/enum.rst:180
msgid ""
"Returns the Enum member in *cls* matching *name*, or raises an :exc:"
"`AttributeError`::"
msgstr ""

#: ../../library/enum.rst:187
msgid ""
"Returns the Enum member in *cls* matching *name*, or raises an :exc:"
"`KeyError`::"
msgstr ""

#: ../../library/enum.rst:194
msgid "Returns each member in *cls* in definition order::"
msgstr ""

#: ../../library/enum.rst:201
msgid "Returns the number of member in *cls*::"
msgstr ""

#: ../../library/enum.rst:208
msgid "Returns each member in *cls* in reverse definition order::"
msgstr ""

#: ../../library/enum.rst:216
msgid "*Enum* is the base class for all *enum* enumerations."
msgstr ""

#: ../../library/enum.rst:220
msgid "The name used to define the ``Enum`` member::"
msgstr ""

#: ../../library/enum.rst:227
msgid "The value given to the ``Enum`` member::"
msgstr ""

#: ../../library/enum.rst:232
msgid "Enum member values"
msgstr ""

#: ../../library/enum.rst:234
msgid ""
"Member values can be anything: :class:`int`, :class:`str`, etc..  If the "
"exact value is unimportant you may use :class:`auto` instances and an "
"appropriate value will be chosen for you.  Care must be taken if you mix :"
"class:`auto` with other values."
msgstr ""

#: ../../library/enum.rst:241
msgid ""
"``_ignore_`` is only used during creation and is removed from the "
"enumeration once creation is complete."
msgstr ""

#: ../../library/enum.rst:244
msgid ""
"``_ignore_`` is a list of names that will not become members, and whose "
"names will also be removed from the completed enumeration.  See :ref:"
"`TimePeriod <enum-time-period>` for an example."
msgstr ""

#: ../../library/enum.rst:250
msgid "This method is called in two different ways:"
msgstr ""

#: ../../library/enum.rst:252
msgid "to look up an existing member:"
msgstr ""

#: ../../library/enum.rst:0
msgid "cls"
msgstr ""

#: ../../library/enum.rst:254 ../../library/enum.rst:259
msgid "The enum class being called."
msgstr ""

#: ../../library/enum.rst:0
msgid "value"
msgstr ""

#: ../../library/enum.rst:255
msgid "The value to lookup."
msgstr ""

#: ../../library/enum.rst:257
msgid "to use the ``cls`` enum to create a new enum:"
msgstr ""

#: ../../library/enum.rst:260
msgid "The name of the new Enum to create."
msgstr ""

#: ../../library/enum.rst:0
msgid "names"
msgstr ""

#: ../../library/enum.rst:261
msgid "The names/values of the members for the new Enum."
msgstr ""

#: ../../library/enum.rst:0
msgid "module"
msgstr "模組"

#: ../../library/enum.rst:262
msgid "The name of the module the new Enum is created in."
msgstr ""

#: ../../library/enum.rst:0
msgid "qualname"
msgstr ""

#: ../../library/enum.rst:263
msgid "The actual location in the module where this Enum can be found."
msgstr ""

#: ../../library/enum.rst:0
msgid "type"
msgstr ""

#: ../../library/enum.rst:264
msgid "A mix-in type for the new Enum."
msgstr ""

#: ../../library/enum.rst:0
msgid "start"
msgstr ""

#: ../../library/enum.rst:265
msgid "The first integer value for the Enum (used by :class:`auto`)"
msgstr ""

#: ../../library/enum.rst:0
msgid "boundary"
msgstr ""

#: ../../library/enum.rst:266
msgid ""
"How to handle out-of-range values from bit operations (:class:`Flag` only)"
msgstr ""

#: ../../library/enum.rst:270
msgid ""
"Returns ``['__class__', '__doc__', '__module__', 'name', 'value']`` and any "
"public methods defined on *self.__class__*::"
msgstr ""

#: ../../library/enum.rst:0
msgid "name"
msgstr ""

#: ../../library/enum.rst:290
msgid "The name of the member being defined (e.g. 'RED')."
msgstr ""

#: ../../library/enum.rst:291
msgid "The start value for the Enum; the default is 1."
msgstr ""

#: ../../library/enum.rst:0
msgid "count"
msgstr ""

#: ../../library/enum.rst:292
msgid "The number of members currently defined, not including this one."
msgstr ""

#: ../../library/enum.rst:0
msgid "last_values"
msgstr ""

#: ../../library/enum.rst:293
msgid "A list of the previous values."
msgstr ""

#: ../../library/enum.rst:295
msgid ""
"A *staticmethod* that is used to determine the next value returned by :class:"
"`auto`::"
msgstr ""

#: ../../library/enum.rst:310
msgid ""
"A *classmethod* that is used to further configure subsequent subclasses. By "
"default, does nothing."
msgstr ""

#: ../../library/enum.rst:315
msgid ""
"A *classmethod* for looking up values not found in *cls*.  By default it "
"does nothing, but can be overridden to implement custom search behavior::"
msgstr ""

#: ../../library/enum.rst:336
msgid ""
"Returns the string used for *repr()* calls.  By default, returns the *Enum* "
"name, member name, and value, but can be overridden::"
msgstr ""

#: ../../library/enum.rst:351
msgid ""
"Returns the string used for *str()* calls.  By default, returns the *Enum* "
"name and member name, but can be overridden::"
msgstr ""

#: ../../library/enum.rst:365
msgid ""
"Returns the string used for *format()* and *f-string* calls.  By default, "
"returns :meth:`__str__` returns, but can be overridden::"
msgstr ""

#: ../../library/enum.rst:379
msgid ""
"Using :class:`auto` with :class:`Enum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""

#: ../../library/enum.rst:385
msgid ""
"*IntEnum* is the same as *Enum*, but its members are also integers and can "
"be used anywhere that an integer can be used.  If any integer operation is "
"performed with an *IntEnum* member, the resulting value loses its "
"enumeration status."
msgstr ""

#: ../../library/enum.rst:405
msgid ""
"Using :class:`auto` with :class:`IntEnum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""

#: ../../library/enum.rst:408 ../../library/enum.rst:579
msgid ""
":meth:`__str__` is now :func:`int.__str__` to better support the "
"*replacement of existing constants* use-case. :meth:`__format__` was "
"already :func:`int.__format__` for that same reason."
msgstr ""

#: ../../library/enum.rst:415
msgid ""
"*StrEnum* is the same as *Enum*, but its members are also strings and can be "
"used in most of the same places that a string can be used.  The result of "
"any string operation performed on or with a *StrEnum* member is not part of "
"the enumeration."
msgstr ""

#: ../../library/enum.rst:419
msgid ""
"There are places in the stdlib that check for an exact :class:`str` instead "
"of a :class:`str` subclass (i.e. ``type(unknown) == str`` instead of "
"``isinstance(str, unknown)``), and in those locations you will need to use "
"``str(StrEnum.member)``."
msgstr ""

#: ../../library/enum.rst:426
msgid ""
"Using :class:`auto` with :class:`StrEnum` results in the lower-cased member "
"name as the value."
msgstr ""

#: ../../library/enum.rst:429
msgid ""
":meth:`__str__` is :func:`str.__str__` to better support the *replacement of "
"existing constants* use-case.  :meth:`__format__` is likewise :func:`str."
"__format__` for that same reason."
msgstr ""

#: ../../library/enum.rst:437
msgid ""
"*Flag* members support the bitwise operators ``&`` (*AND*), ``|`` (*OR*), "
"``^`` (*XOR*), and ``~`` (*INVERT*); the results of those operators are "
"members of the enumeration."
msgstr ""

#: ../../library/enum.rst:443
msgid "Returns *True* if value is in self::"
msgstr ""

#: ../../library/enum.rst:463
msgid "Returns all contained members::"
msgstr ""

#: ../../library/enum.rst:472
msgid "Returns number of members in flag::"
msgstr ""

#: ../../library/enum.rst:481
msgid "Returns *True* if any members in flag, *False* otherwise::"
msgstr ""

#: ../../library/enum.rst:493
msgid "Returns current flag binary or'ed with other::"
msgstr ""

#: ../../library/enum.rst:500
msgid "Returns current flag binary and'ed with other::"
msgstr ""

#: ../../library/enum.rst:509
msgid "Returns current flag binary xor'ed with other::"
msgstr ""

#: ../../library/enum.rst:518
msgid "Returns all the flags in *type(self)* that are not in self::"
msgstr ""

#: ../../library/enum.rst:529
msgid ""
"Function used to format any remaining unnamed numeric values.  Default is "
"the value's repr; common choices are :func:`hex` and :func:`oct`."
msgstr ""

#: ../../library/enum.rst:534
msgid ""
"Using :class:`auto` with :class:`Flag` results in integers that are powers "
"of two, starting with ``1``."
msgstr ""

#: ../../library/enum.rst:537
msgid "The *repr()* of zero-valued flags has changed.  It is now::"
msgstr ""

#: ../../library/enum.rst:545
msgid ""
"*IntFlag* is the same as *Flag*, but its members are also integers and can "
"be used anywhere that an integer can be used."
msgstr ""

#: ../../library/enum.rst:558
msgid ""
"If any integer operation is performed with an *IntFlag* member, the result "
"is not an *IntFlag*::"
msgstr ""

#: ../../library/enum.rst:564
msgid "If a *Flag* operation is performed with an *IntFlag* member and:"
msgstr ""

#: ../../library/enum.rst:566
msgid "the result is a valid *IntFlag*: an *IntFlag* is returned"
msgstr ""

#: ../../library/enum.rst:567
msgid ""
"the result is not a valid *IntFlag*: the result depends on the "
"*FlagBoundary* setting"
msgstr ""

#: ../../library/enum.rst:569
msgid "The *repr()* of unnamed zero-valued flags has changed.  It is now:"
msgstr ""

#: ../../library/enum.rst:576
msgid ""
"Using :class:`auto` with :class:`IntFlag` results in integers that are "
"powers of two, starting with ``1``."
msgstr ""

#: ../../library/enum.rst:586
msgid ""
"*EnumCheck* contains the options used by the :func:`verify` decorator to "
"ensure various constraints; failed constraints result in a :exc:`ValueError`."
msgstr ""

#: ../../library/enum.rst:591
msgid "Ensure that each value has only one name::"
msgstr ""

#: ../../library/enum.rst:607
msgid ""
"Ensure that there are no missing values between the lowest-valued member and "
"the highest-valued member::"
msgstr ""

#: ../../library/enum.rst:622
msgid ""
"Ensure that any flag groups/masks contain only named flags -- useful when "
"values are specified instead of being generated by :func:`auto`"
msgstr ""

#: ../../library/enum.rst:639
msgid ""
"CONTINUOUS and NAMED_FLAGS are designed to work with integer-valued members."
msgstr ""

#: ../../library/enum.rst:645
msgid ""
"*FlagBoundary* controls how out-of-range values are handled in *Flag* and "
"its subclasses."
msgstr ""

#: ../../library/enum.rst:650
msgid ""
"Out-of-range values cause a :exc:`ValueError` to be raised.  This is the "
"default for :class:`Flag`::"
msgstr ""

#: ../../library/enum.rst:667
msgid ""
"Out-of-range values have invalid values removed, leaving a valid *Flag* "
"value::"
msgstr ""

#: ../../library/enum.rst:680
msgid ""
"Out-of-range values lose their *Flag* membership and revert to :class:`int`. "
"This is the default for :class:`IntFlag`::"
msgstr ""

#: ../../library/enum.rst:693
msgid ""
"Out-of-range values are kept, and the *Flag* membership is kept.  This is "
"used for some stdlib flags:"
msgstr ""

#: ../../library/enum.rst:709
msgid "Supported ``__dunder__`` names"
msgstr ""

#: ../../library/enum.rst:711
msgid ""
":attr:`__members__` is a read-only ordered mapping of ``member_name``:"
"``member`` items.  It is only available on the class."
msgstr ""

#: ../../library/enum.rst:714
msgid ""
":meth:`__new__`, if specified, must create and return the enum members; it "
"is also a very good idea to set the member's :attr:`_value_` appropriately.  "
"Once all the members are created it is no longer used."
msgstr ""

#: ../../library/enum.rst:720
msgid "Supported ``_sunder_`` names"
msgstr ""

#: ../../library/enum.rst:722
msgid "``_name_`` -- name of the member"
msgstr ""

#: ../../library/enum.rst:723
msgid ""
"``_value_`` -- value of the member; can be set / modified in ``__new__``"
msgstr ""

#: ../../library/enum.rst:725
msgid ""
"``_missing_`` -- a lookup function used when a value is not found; may be "
"overridden"
msgstr ""

#: ../../library/enum.rst:727
msgid ""
"``_ignore_`` -- a list of names, either as a :class:`list` or a :class:"
"`str`, that will not be transformed into members, and will be removed from "
"the final class"
msgstr ""

#: ../../library/enum.rst:730
msgid ""
"``_order_`` -- used in Python 2/3 code to ensure member order is consistent "
"(class attribute, removed during class creation)"
msgstr ""

#: ../../library/enum.rst:732
msgid ""
"``_generate_next_value_`` -- used to get an appropriate value for an enum "
"member; may be overridden"
msgstr ""

#: ../../library/enum.rst:737
msgid ""
"For standard :class:`Enum` classes the next value chosen is the last value "
"seen incremented by one."
msgstr ""

#: ../../library/enum.rst:740
msgid ""
"For :class:`Flag` classes the next value chosen will be the next highest "
"power-of-two, regardless of the last value seen."
msgstr ""

#: ../../library/enum.rst:743
msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``\\ 、\\ ``_order_``\\ 、\\ ``_generate_next_value_``"

#: ../../library/enum.rst:744
msgid "``_ignore_``"
msgstr "``_ignore_``"

#: ../../library/enum.rst:749
msgid "Utilities and Decorators"
msgstr ""

#: ../../library/enum.rst:753
msgid ""
"*auto* can be used in place of a value.  If used, the *Enum* machinery will "
"call an *Enum*'s :meth:`_generate_next_value_` to get an appropriate value. "
"For *Enum* and *IntEnum* that appropriate value will be the last value plus "
"one; for *Flag* and *IntFlag* it will be the first power-of-two greater than "
"the last value; for *StrEnum* it will be the lower-cased version of the "
"member's name."
msgstr ""

#: ../../library/enum.rst:760
msgid ""
"``_generate_next_value_`` can be overridden to customize the values used by "
"*auto*."
msgstr ""

#: ../../library/enum.rst:763
msgid ""
"in 3.13 the default ``\"generate_next_value_`` will always return the "
"highest member value incremented by 1, and will fail if any member is an "
"incompatible type."
msgstr ""

#: ../../library/enum.rst:769
msgid ""
"A decorator similar to the built-in *property*, but specifically for "
"enumerations.  It allows member attributes to have the same names as members "
"themselves."
msgstr ""

#: ../../library/enum.rst:773
msgid ""
"the *property* and the member must be defined in separate classes; for "
"example, the *value* and *name* attributes are defined in the *Enum* class, "
"and *Enum* subclasses can define members with the names ``value`` and "
"``name``."
msgstr ""

#: ../../library/enum.rst:782
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  It searches an "
"enumeration's :attr:`__members__`, gathering any aliases it finds; if any "
"are found :exc:`ValueError` is raised with the details::"
msgstr ""

#: ../../library/enum.rst:800
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  Members from :"
"class:`EnumCheck` are used to specify which constraints should be checked on "
"the decorated enumeration."
msgstr ""

#: ../../library/enum.rst:808
msgid "A decorator for use in enums: its target will become a member."
msgstr ""

#: ../../library/enum.rst:814
msgid "A decorator for use in enums: its target will not become a member."
msgstr ""

#: ../../library/enum.rst:821
msgid "Notes"
msgstr ""

#: ../../library/enum.rst:823
msgid ":class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag`"
msgstr ""

#: ../../library/enum.rst:825
msgid ""
"These three enum types are designed to be drop-in replacements for existing "
"integer- and string-based values; as such, they have extra limitations:"
msgstr ""

#: ../../library/enum.rst:828
msgid "``__str__`` uses the value and not the name of the enum member"
msgstr ""

#: ../../library/enum.rst:830
msgid ""
"``__format__``, because it uses ``__str__``, will also use the value of the "
"enum member instead of its name"
msgstr ""

#: ../../library/enum.rst:833
msgid ""
"If you do not need/want those limitations, you can either create your own "
"base class by mixing in the ``int`` or ``str`` type yourself::"
msgstr ""

#: ../../library/enum.rst:840
msgid "or you can reassign the appropriate :meth:`str`, etc., in your enum::"
msgstr ""

#~ msgid "The *start* parameter was added."
#~ msgstr "新增 *start* 參數。"

#~ msgid "OrderedEnum"
#~ msgstr "OrderedEnum"

#~ msgid "DuplicateFreeEnum"
#~ msgstr "DuplicateFreeEnum"

#~ msgid "TimePeriod"
#~ msgstr "TimePeriod"

#~ msgid "_Private__names"
#~ msgstr "_Private__names"
